<div className="app">
      <Navbar/>
      <div className="app__left">
        <div className="app__header">
          <h1>COVID-19 Tracker</h1>
          <FormControl className="app__dropdown">
            <Select
              variant="outlined"
              value={country}
              onChange={onCountryChange}
            >
              <MenuItem value="worldwide">Worldwide</MenuItem>
              {countries.map((country) => (
                <MenuItem value={country.value}>{country.name}</MenuItem>
              ))}
            </Select>
          </FormControl>
        </div>
        <div className="app__stats">
          <InfoBox
            onClick={(e) => setCasesType("cases")}
            title="Coronavirus Cases"
            isRed
            active={casesType === "cases"}
            cases={prettyPrintStat(countryInfo.todayCases)}
            total={numeral(countryInfo.cases).format("0.0a")}
          />
          <InfoBox
            onClick={(e) => setCasesType("recovered")}
            title="Recovered"
            active={casesType === "recovered"}
            cases={prettyPrintStat(countryInfo.todayRecovered)}
            total={numeral(countryInfo.recovered).format("0.0a")}
          />
          <InfoBox
            onClick={(e) => setCasesType("deaths")}
            title="Deaths"
            isRed
            active={casesType === "deaths"}
            cases={prettyPrintStat(countryInfo.todayDeaths)}
            total={numeral(countryInfo.deaths).format("0.0a")}
          />
        </div>
        <Map
          countries={mapCountries}
          casesType={casesType}
          center={mapCenter}
          zoom={mapZoom}
        />
      </div>
      <Card className="app__right">
        <CardContent>
          <div className="app__information">
            <h3>Live Cases by Country</h3>
            <Table countries={tableData} />
            <h3>Worldwide new {casesType}</h3>
            <LineGraph casesType={casesType} />
          </div>
        </CardContent>
      </Card>
    </div>


MenuItems.map((item,index)=>{
                        return(
                            <li key={index}>
                            <Route path="/Authentication" component={Authentication}>
                            <Link className= {item.cName} to={item.url}>
                                    {item.title}
                                </Link>
                            </Route>
                                <Link className= {item.cName} to={item.url}>
                                    {item.title}
                                </Link>
                            </li>
                        )
                    })
    
//          <img src={this.state.imageURL} alt="img" />             <input ref={(ref) => { this.fileName = ref; }} type="text" placeholder="Enter the desired name of file" />

//import './Button.css';

/*
const M = (props) => {

  const [state,setState] = useState([{imageURL: 'Hello'}])

  handleUploadImage(ev) {
      ev.preventDefault();
  
      const data = new FormData();
      data.append('file', uploadInput.files[0]);
      data.append('filename', fileName.value);
  
      fetch('/upload', {
        method: 'POST',
        body: data,
      }).then((response) => {
        response.json().then((body) => {
          setState({ imageURL: body });
        });
      });
    }

  return(
    <form onSubmit={handleUploadImage}>
          <div>
            <input ref={(ref) => { uploadInput = ref; }} type="file" />
          </div>
          <div>
          <input ref={(ref) => { fileName = ref; }} type="text" placeholder="Enter the desired name of file" />
          </div>
          <br />
          <div>
            <button className="btn">Upload</button>
          </div>
          <p>{state.imageURL}</p>
        </form>

  )
}
class M extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
    userId:1,
	  title:'Flask React App',
	  completed:false
    };

    this.handleUploadImage = this.handleUploadImage.bind(this);
  }

  handleUploadImage(ev) {
    ev.preventDefault();

    const data = new FormData();
    data.append('file', this.uploadInput.files[0]);
    data.append('filename', this.fileName.value);

    fetch('/api', {
      method: 'POST',
      body: data,
    }).then((response) => {
      response.json().then((body) => {
        this.setState(bodyS);
      });
    });
  }

  render() {
    return (
      <div>
      <form onSubmit={this.handleUploadImage}>
        <div>
          <input ref={(ref) => { this.uploadInput = ref; }} type="file" />
        </div>
        <div>
        <input ref={(ref) => { this.fileName = ref; }} type="text" placeholder="Enter the desired name of file" />
        </div>
        <br />
        <div>
          <button className="btn">Upload</button>
        </div>
      </form>

      <section className="hero">
            <h1>Hello! {this.state.title}</h1>
        </section>
      
    
      </div>

    );
  }
}
 
const [state,setState] = useState("Hello World")
  const [name, setName] = useState("");
  const [selectedFile, setSelectedFile] = useState(null);

 function handleUploadImage(ev) {
      ev.preventDefault();    
      const data = new FormData();
      data.append('file', selectedFile.files[0]);
      data.append('filename', name.value);
  
      fetch('/upload', {
        method: 'POST',
        body: data,
      }).then((response) => {
        response.json().then((body) => {
          setState(state);
        });
      });
    }

  return(
    <div>
    <form>
          <div>
            <input value={selectedFile}  onChange={(e) => setSelectedFile(e.target.files[0])} type="file" />
          </div>
          <div>
            <input value={name}  onChange={(e) => setName(e.target.value)} type="text" placeholder="Enter the desired name of file" />
          </div>
          <br />
          <div>
            <button onClick={handleUploadImage} className="btn">Upload</button>
          </div>
          
        </form>
        <p value={state}>{state}</p>
     </div>

  )
*/